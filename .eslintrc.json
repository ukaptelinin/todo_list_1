{
    "env": {
        "browser": true,
        "es2021": true
    },
    "extends": [
        "plugin:react/recommended",
        "airbnb",
        "airbnb-typescript",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "eslint:recommended",
        "plugin:react-hooks/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": 12,
        "sourceType": "module",
        "project": "./tsconfig.json"
    },
    "plugins": [
        "react",
        "@typescript-eslint"
    ],
    "rules": {
        "@typescript-eslint/indent": ["error", 4, {
            "SwitchCase": 0,
            "ignoredNodes": [
                "FunctionExpression > .params[decorators.length > 0]",
                "FunctionExpression > .params > :matches(Decorator, :not(:first-child))",
                "ClassBody.body > PropertyDefinition[decorators.length > 0] > .key"
            ]
        }],
        "@typescript-eslint/semi": ["warn", "always"], // TODO: decide for class arrow functions
        "react/jsx-indent": ["error", 4],
        "react/jsx-indent-props": ["error", 4],
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": ["error"],
        "no-shadow": "off",
        "@typescript-eslint/no-magic-numbers": ["error", {
            "ignoreEnums": true,
            "ignore": [-1, 0, 1, 202, 400, 401, 403, 404, 406, 408, 409, 412, 415, 500, 504]
        }],
        "@typescript-eslint/no-unused-vars": ["error"],
        "@typescript-eslint/no-explicit-any": ["error"],
        "@typescript-eslint/explicit-module-boundary-types": ["error"],
        "@typescript-eslint/no-shadow": ["error"],
        "max-len": ["error", { "code": 120 }],
        "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
        "react/jsx-filename-extension": ["warn", {"extensions": [".tsx"]}],
        "react/prop-types": "off",
        "react/sort-comp": [1],
        "react/jsx-props-no-spreading": [1],
        "import/extensions": [
            "warn", // TODO: find proper solution for type aliases
            "ignorePackages",
            {
                "ts": "never",
                "tsx": "never"
            }
        ],
        "@typescript-eslint/explicit-function-return-type": [
            "error",
            {
                "allowExpressions": true
            }
        ],
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": ["error"],
        "no-restricted-syntax": [
            "error",
            {
                "selector": "ForInStatement",
                "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
            },
            {
                "selector": "LabeledStatement",
                "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
            },
            {
                "selector": "WithStatement",
                "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."

            }
        ],
        "react/require-default-props": [0],
        "react/function-component-definition": "off",
        "function-paren-newline": "off",
        "react/react-in-jsx-scope": "off",
        "linebreak-style": "off",
        "react/jsx-no-constructed-context-values": "off",
        "no-unused-vars": "off"
    }
}
